{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["axiosGitHubGraphQL","axios","create","baseURL","headers","Authorization","concat","getIssuesOfRepository","path","_path$split","split","_path$split2","Object","slicedToArray","user","repository","post","query","variables","resolveIssuesQuery","queryResult","data","errors","App","state","onChange","event","_this","setState","target","value","onSubmit","onFetchFromGitHub","preventDefault","then","this","_this$state","react_default","a","createElement","className","id","type","App_User","Component","User","_ref","map","error","message","join","src","avatarUrl","alt","style","width","href","url","name","bio","company","email","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b2f97d77.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\nconst TITLE = 'GitHub user search';\n\nconst key = 'bc71434457909492d70126f3e7b07c124a05c809';\n\nconst axiosGitHubGraphQL = axios.create({\n  baseURL: 'https://api.github.com/graphql',\n  headers: {\n    Authorization: `bearer ${key}`\n  }\n});\n\nconst GET_ISSUES_OF_REPOSITORY = `\n  query ($user: String!) {\n    user(login: $user) {\n      name\n      url\n      bio\n      company\n      email\n      avatarUrl\n    }\n  }\n`;\n\nconst getIssuesOfRepository = path => {\n  const [user, repository] = path.split('/');\n\n  return axiosGitHubGraphQL.post('', {\n    query: GET_ISSUES_OF_REPOSITORY,\n    variables: { user, repository }\n  });\n};\n\nconst resolveIssuesQuery = queryResult => () => ({\n  user: queryResult.data.data.user,\n  errors: queryResult.data.errors\n});\n\nclass App extends Component {\n  state = {\n    path: 'AlexKlymenkoWork',\n    user: null,\n    errors: null\n  };\n\n  componentDidMount() {\n    this.onFetchFromGitHub(this.state.path);\n  }\n\n  onChange = event => {\n    this.setState({ path: event.target.value });\n  };\n\n  onSubmit = event => {\n    this.onFetchFromGitHub(this.state.path);\n\n    event.preventDefault();\n  };\n\n  onFetchFromGitHub = path => {\n    getIssuesOfRepository(path).then(queryResult =>\n      this.setState(resolveIssuesQuery(queryResult))\n    );\n  };\n\n  render() {\n    const { path, user, errors } = this.state;\n\n    return (\n      <div className='wrapper'>\n        <div className='main'>\n          <div className='container'>\n            <div className='row'>\n              <div className='form-container'>\n                <h2 className='title-container'>{TITLE}</h2>\n                <form onSubmit={this.onSubmit}>\n                  <input\n                    id='url'\n                    type='text'\n                    value={path}\n                    onChange={this.onChange}\n                  />\n                  <button type='submit'>Search</button>\n                </form>\n                {user ? (\n                  <User user={user} errors={errors} />\n                ) : (\n                  <p>No information yet ...</p>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst User = ({ user, errors }) => {\n  if (errors) {\n    return (\n      <p>\n        <strong className='info__error'>Something went wrong:</strong>\n        {errors.map(error => error.message).join(' ')}\n      </p>\n    );\n  }\n\n  return (\n    <div className='info__info'>\n      <p>\n        Photo: <img src={user.avatarUrl} alt='img' style={{ width: '10rem' }} />\n      </p>\n      <p>\n        User: <a href={user.url}>{user.name}</a>\n      </p>\n      <p>\n        User bio: <span className='info__key'> {user.bio} </span>\n      </p>\n      <p>\n        Company: <span className='info__key'> {user.company} </span>\n      </p>\n      <p>\n        Email: <span className='info__key'> {user.email} </span>\n      </p>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.css';\nimport './App.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( < App / > , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}